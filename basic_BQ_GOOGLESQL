--select 3 columns from table

SELECT Name, Equipment,Age FROM `rajivdemobq.rajivbq.openpowerlifting` 


--select all columns 

Select * from `rajivdemobq.rajivbq.openpowerlifting`


--unique values sex amd equipment 

select distinct Equipment,Sex  from `rajivdemobq.rajivbq.openpowerlifting`


--operators and filters

select * from `rajivdemobq.rajivbq.openpowerlifting`  
where age < 30 


-- equipment =! raw
select * from `rajivdemobq.rajivbq.openpowerlifting`
where Equipment <> 'Raw'

--use multiple 

select * from `rajivdemobq.rajivbq.openpowerlifting`
where Equipment in ('Single-ply','Raw')


--or operator 

select * from `rajivdemobq.rajivbq.openpowerlifting`
where Equipment in ('Single-ply','Raw') or Division ='Master 51+'


--and operator
select * from `rajivdemobq.rajivbq.openpowerlifting`
where Equipment in ('Single-ply','Raw') and  Division ='Teen' 

--limit and subqueries

--top 10 rows
select Name,Age from `rajivdemobq.rajivbq.openpowerlifting` 
where Equipment = 'Raw'and Age is not null
order by Age 
limit 10 

--oldest person in the table

select Name,Age from `rajivdemobq.rajivbq.openpowerlifting` 
where Equipment = 'Raw'and Age is not null
order by Age desc
limit 1

--second oldest in the table
select Name,Age from `rajivdemobq.rajivbq.openpowerlifting` where Equipment ='Raw'and Name <>
    (select Name from `rajivdemobq.rajivbq.openpowerlifting` 
    where Equipment = 'Raw'and Age is not null
    order by Age desc
    limit 1)
order by age desc 
limit 1

-- distinct 10 from the list or age highest with no nulls 
select distinct Name from 
 ( select Name from `rajivdemobq.rajivbq.openpowerlifting` 
        where Equipment = 'Raw'and Age is not null
        order by Age desc
        limit 10)



--Aggregation groupby and aliases

--SIX aggregation SUM

select sum(TotalKg)
from `rajivdemobq.rajivbq.openpowerlifting` 
where Equipment ='Raw' and Age <15

--Count 
select sum(TotalKg), COUNT(Name)
from `rajivdemobq.rajivbq.openpowerlifting` 
where Equipment ='Raw' and Age <15

--avg max min 

select sum(TotalKg), count(Name), Avg(TotalKg), max(TotalKg), min(TotalKg)
from `rajivdemobq.rajivbq.openpowerlifting` 
where Equipment ='Raw' and Age <15


--count if 
select countif(age < 14)
from `rajivdemobq.rajivbq.openpowerlifting`

--countif multiple statement 
select countif(age <14 and Equipment = 'Raw')
from `rajivdemobq.rajivbq.openpowerlifting`

--groupby  and alias
select Name,Equipment, Sum(TotalKg) as TotalKg_sum
from `rajivdemobq.rajivbq.openpowerlifting`
where Equipment = 'Raw' and Age <15
Group By Name,Equipment


--like and wildcards
--starting with P

select Name from `rajivdemobq.rajivbq.openpowerlifting`
where Name like 'P%'

-- ending Y 
select Name from `rajivdemobq.rajivbq.openpowerlifting`
where Name like '%Y'

--second letter e 

select Name from `rajivdemobq.rajivbq.openpowerlifting`
where Name like '_e%'

--having clause
select Name, Sum(TotalKg) as TotalKg_sum
from `rajivdemobq.rajivbq.openpowerlifting`
--where TotalKg_sum > 500
group by Name
having TotalKg_sum > 500

--union and union all and union distict and remove duplicated

-- SELECT * FROM `rajivdemobq.rajivbq.openpowerlifting` 
-- where Sex= 'M' 
-- insert into 'rajivdemo.rajivbq.OPW_Male' 

-- SELECT *
-- FROM `rajivdemobq.rajivbq.openpowerlifting`
-- WHERE Sex = 'M'

CREATE OR REPLACE TABLE `rajivdemobq.rajivbq.OPW_Male` AS
SELECT *
FROM `rajivdemobq.rajivbq.openpowerlifting`
WHERE Sex = 'M'

CREATE OR REPLACE TABLE `rajivdemobq.rajivbq.OPW_Female` AS
SELECT *
FROM `rajivdemobq.rajivbq.openpowerlifting`
WHERE Sex = 'F'

-- union all from equipment column for raw and single-ply ( all select statements should be same and same type second rule order should be same)
select Name,Age from `rajivdemobq.rajivbq.OPW_Female`
where Equipment ='Raw'

union all 

select Name,Age from `rajivdemobq.rajivbq.OPW_Male`
where Equipment ='Single-ply'


-- union distinct to remove duplicates ( vertically)

select Name,Age from `rajivdemobq.rajivbq.OPW_Female`
where Equipment ='Raw'

union distinct 

select Name,Age from `rajivdemobq.rajivbq.OPW_Female`
where Equipment ='Single-ply'


--using joins from multiple tables (horizontally joining tables)

--meetid (20,6,100) left join left table and matching records or right 

select pw.Name,pw.Equipment,pw.Division
from `rajivdemobq.rajivbq.openpowerlifting` as pw
left join `rajivdemobq.rajivbq.meets` as mt
on pw.MeetID = mt.MeetID
where pw.MeetID in (20,62,100)


--right join right table and matching records of left 
select pw.Name,pw.Equipment,pw.Division
from `rajivdemobq.rajivbq.openpowerlifting` as pw
right join `rajivdemobq.rajivbq.meets` as mt
on pw.MeetID = mt.MeetID



--inner join (Full matching in both only)

select pw.Name,pw.Equipment,pw.Division
from `rajivdemobq.rajivbq.openpowerlifting` as pw
inner join `rajivdemobq.rajivbq.meets` as mt
on pw.MeetID = mt.MeetID


--full outer join (everything match no match all )
select pw.Name,pw.Equipment,pw.Division
from `rajivdemobq.rajivbq.openpowerlifting` as pw
full outer join  `rajivdemobq.rajivbq.meets` as mt
on pw.MeetID = mt.MeetID
where pw.MeetID in (20,62,100)




--case statement 

--build logic (if else kind off type)

--age <12 very young if 12-15 young 16-35 adult or old end it

select Name,Age,
case
when  Age <12 then'very young'
when Age between 12 and 15 then 'young'
when Age between 16 and 35 then 'Adult'
else 'old'
end as Age_category
from `rajivdemobq.rajivbq.openpowerlifting`


--decimals in table and nulls 

select Name,Age,
case
when Age is null then 'N/A'
when  Age <12 then'very young'
when Age between 12 and 15 then 'young'
when Age between 15 and 35 then 'Adult'
else 'old'
end as Age_category
from `rajivdemobq.rajivbq.openpowerlifting`


--unnest and struct with arrays 

select [1,2,12,22,33,44,11] as initarray

--generate array
select GENERATE_ARRAY(1, 1000, 10) as initarray

--create array [1-1000 and should be 10 numbers away] limit upto 500 

select * from unnest (GENERATE_ARRAY(1,1000,1)) as initarray
where initarray <500


--create an array and subquery it with lmit and buld an new columns *3 

select initarray, initarray * 3 as newinitarray from 
  (select * from unnest (GENERATE_ARRAY(1,1000,1)) as initarray
  where initarray <500)


--struct using 2 dimenstional table

select 
* from unnest ([struct('A' as name,20 as age),('B',24)])


